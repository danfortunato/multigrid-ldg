#ifndef MASTER_H
#define MASTER_H

#include <array>
#include <vector>
#include "common.h"
#include "range.h"
#include "ndarray.h"
#include "wireframe.h"

namespace DG
{
    /** @brief The master simplex */
    template<int N, int P>
    struct Master
    {
        /** Order of polynomial */
        static const int p = P-1;
        /** Number of nodes per element */
        static const int npl = ichoose(P+N-1,N);
        /** The local DG nodes */
        static const SimplexArray<Tuple<double,N>,N,P> nodes;
        /** Vandermonde matrix */
        static const SimplexMat<N,P> vandermonde;
        /** Differentiation Vandermonde matrices */
        static const std::array<SimplexMat<N,P>,N> dvandermonde;
        /** Mass matrix */
        static const SimplexMat<N,P> mass;
        /** Differentiation matrices */
        static const std::array<SimplexMat<N,P>,N> diff;
        /** The linearIndex-th node in a given simplex */
        static Tuple<double,N> dgnodes(double linearIndex, const Simplex<N>& simplex = Simplex<N>())
        {
            assert(0 <= linearIndex && linearIndex < npl);
            Tuple<double,N> local = nodes(linearIndex);
            return simplex.p[0].matrix() + simplex.jacobian_mat()*local.matrix();
        }
    };

    template<int N, int P>
    struct Quadrature
    {
        /** Quadrature points */
        static const std::vector<Tuple<double,N>> nodes;
        /** Quadrature weights */
        static const std::vector<double> weights;
    };

    /** @brief Equispaced nodes on a simplex */
    template<int N, int P>
    SimplexArray<Tuple<double,N>,N,P> simplexNodes()
    {
        SimplexArray<Tuple<double,N>,N,P> nodes;
        for (auto it = nodes.begin(); it != nodes.end(); ++it) {
            *it = it.index().template cast<double>() / (P-1);
        }
        return nodes;
    }

    /** @brief Compute the normalized Jacobi polynomials */
    template<int N, int P>
    SimplexVec<N,P> jacobi(int n, int a, int b, const SimplexVec<N,P>& x)
    {
        double a1  = a+1;
        double b1  = b+1;
        double ab  = a+b;
        double ab1 = a+b+1;

        Eigen::Matrix<double,ichoose(P+N-1,N),Eigen::Dynamic> PL(ichoose(P+N-1,N), n+1);

        // Initial values P_0(x) and P_1(x)
        double gamma0 = std::pow(2.0,ab1)/ab1*std::tgamma(a1)*std::tgamma(b1)/std::tgamma(ab1);
        SimplexVec<N,P> next = SimplexVec<N,P>::Constant(1.0/std::sqrt(gamma0));
        if (n == 0) {
            return next;
        } else {
            PL.col(0) = next;
        }

        double gamma1 = a1*b1/(ab+3.0)*gamma0;
        next = ((ab+2.0)*x.array()/2.0+(a-b)/2.0) / std::sqrt(gamma1);
        if (n == 1) {
            return next;
        } else {
            PL.col(1) = next;
        }

        // Repeat value in recurrence
        double aold = 2.0/(2.0+ab)*std::sqrt(a1*b1/(ab+3.0));

        // Forward recurrence using the symmetry of the recurrence
        for (int i=1; i<n; ++i) {
            double h1 = 2.0*i+ab;
            double anew = 2.0/(h1+2.0)*std::sqrt((i+1)*(i+ab1)*(i+a1)*(i+b1)/(h1+1.0)/(h1+3.0));
            double bnew = -(a*a-b*b)/h1/(h1+2.0);
            PL.col(i+1) = ((x.array()-bnew)*PL.col(i).array() - aold*PL.col(i-1).array()) / anew;
            aold = anew;
        }

        return PL.col(n);
    }

    /** @brief Compute the derivative of the normalized Jacobi polynomials */
    template<int N, int P>
    SimplexVec<N,P> djacobi(int n, int a, int b, const SimplexVec<N,P>& x)
    {
        if (n == 0) {
            return SimplexVec<N,P>::Zero();
        } else {
            return std::sqrt(n*(n+a+b+1)) * jacobi<N,P>(n-1, a+1, b+1, x);
        }
    }

    /** @brief Evaluate the porder-th Koornwinder polynomial at the given nodes */
    template<int N, int P>
    SimplexVec<N,P> koornwinder(const SimplexArray<Tuple<double,N>,N,P>& nodes, const Tuple<int,N>& porder)
    {
        // Map nodes from [0,1] to [-1,1]
        Eigen::Matrix<double,ichoose(P+N-1,N),N> X;
        for (auto it = nodes.begin(); it != nodes.end(); ++it) {
            X.row(it.linearIndex()) = 2*(*it)-1;
        }

        // Map (x,y,z,...) to (a,b,c,...) coordinates
        Eigen::Matrix<double,ichoose(P+N-1,N),N> A;
        SimplexVec<N,P> denom;
        for (int i=0; i<N-1; ++i) {
            denom.setConstant(3-N+i);
            for (int j=i+1; j<N; ++j) {
                denom -= X.col(j);
            }
            for (int k=0; k<denom.size(); ++k) {
                A(k,i) = (denom[k]!=0) ? 2*(1.0+X(k,i))/denom[k]-1 : -1;
            }
        }
        A.col(N-1) = X.col(N-1);

        // Compute the product of the Jacobi polynomials
        SimplexVec<N,P> v = SimplexVec<N,P>::Ones();
        int poly  = 0;
        int power = 0;
        for (int i=0; i<N; ++i) {
            SimplexVec<N,P> a = A.col(i);
            v = v.cwiseProduct(jacobi<N,P>(porder[i], poly, 0, a));
            v = v.cwiseProduct(((1-a.array()).pow(power)).matrix());
            poly  += 2*porder[i]+1;
            power += porder[i];
        }

        // Normalize
        v *= std::pow(2.0,ichoose(N,2)/2.0+1);

        return v;
    }

    /** @brief Evaluate the derivative of the porder-th Koornwinder polynomial
     *         in the dim-th dimension at the given nodes */
    template<int N, int P>
    SimplexVec<N,P> dkoornwinder(const SimplexArray<Tuple<double,N>,N,P>& nodes, const Tuple<int,N>& porder, int dim)
    {
        // Map nodes from [0,1] to [-1,1]
        Eigen::Matrix<double,ichoose(P+N-1,N),N> X;
        for (auto it = nodes.begin(); it != nodes.end(); ++it) {
            X.row(it.linearIndex()) = 2*(*it)-1;
        }

        // Map (x,y,z,...) to (a,b,c,...) coordinates
        Eigen::Matrix<double,ichoose(P+N-1,N),N> A;
        SimplexVec<N,P> denom;
        for (int i=0; i<N-1; ++i) {
            denom.setConstant(3-N+i);
            for (int j=i+1; j<N; ++j) {
                denom -= X.col(j);
            }
            for (int k=0; k<denom.size(); ++k) {
                A(k,i) = (denom[k]!=0) ? 2*(1.0+X(k,i))/denom[k]-1 : -1;
            }
        }
        A.col(N-1) = X.col(N-1);

        // Compute the derivative using the chain rule
        SimplexVec<N,P> dv = SimplexVec<N,P>::Zero();
        for (int d=0; d<dim+1; ++d) {

            // Compute d(a_d)/d(x_dim)
            SimplexVec<N,P> chain = SimplexVec<N,P>::Ones();
            if (d != dim) chain = 0.5*(1+A.col(d).array());
            int divide = 0;
            for (int i=d+1; i<N; ++i) divide|=1<<i;

            // Compute  d/d(a_d)
            SimplexVec<N,P> da  = SimplexVec<N,P>::Zero();
            SimplexVec<N,P> fac = SimplexVec<N,P>::Ones();
            int poly  = 0;
            int power = 0;
            for (int i=0; i<N; ++i) {
                SimplexVec<N,P> a = A.col(i);
                if (i != d) {
                    fac = fac.cwiseProduct(jacobi<N,P>(porder[i], poly, 0, a));
                    if (power>0) {
                        if (divide&(1<<i)) {
                            fac = 2*fac.cwiseProduct(((1-a.array()).pow(power-1)).matrix());
                        } else {
                            fac = fac.cwiseProduct(((1-a.array()).pow(power)).matrix());
                        }
                    }
                } else {
                    da = djacobi<N,P>(porder[i], poly, 0, a);
                    if (power>0) {
                        da = da.cwiseProduct(((1-a.array()).pow(power)).matrix());
                        da -= jacobi<N,P>(porder[i], poly, 0, a).cwiseProduct(power*((1-a.array()).pow(power-1)).matrix());
                    }
                }
                poly  += 2*porder[i]+1;
                power += porder[i];
            }

            // Add contribution from d(a_d)/d(x_dim) d/d(a_d)
            dv += chain.cwiseProduct(fac).cwiseProduct(da);
        }

        // Normalize
        dv *= std::pow(2.0,ichoose(N,2)/2.0+1);

        return dv;
    }

    /** @brief The Vandermonde matrix on the unit simplex */
    template<int N, int P>
    SimplexMat<N,P> simplexVandermonde()
    {
        SimplexMat<N,P> vandermonde;
        auto nodes = simplexNodes<N,P>();
        for (SimplexRangeIterator<N,P> it; it != SimplexRange<N,P>::end(); ++it) {
            vandermonde.col(it.linearIndex()) = koornwinder(nodes, it.index());
        }
        return vandermonde;
    }

    /** @brief The differentiation Vandermonde matrices on the unit simplex */
    template<int N, int P>
    std::array<SimplexMat<N,P>,N> simplexDVandermonde()
    {
        std::array<SimplexMat<N,P>,N> dvandermonde;
        auto nodes = simplexNodes<N,P>();
        for (int i=0; i<N; ++i) {
            for (SimplexRangeIterator<N,P> it; it != SimplexRange<N,P>::end(); ++it) {
                dvandermonde[i].col(it.linearIndex()) = dkoornwinder(nodes, it.index(), i);
            }
        }
        return dvandermonde;
    }

    /** @brief The mass matrix on the unit simplex */
    template<int N, int P>
    SimplexMat<N,P> simplexMass()
    {
        SimplexMat<N,P> V = simplexVandermonde<N,P>();
        SimplexMat<N,P> Vinv = V.inverse();
        return Vinv.transpose() * Vinv;
    }

    /** @brief The differentiation matrices on the unit simplex */
    template<int N, int P>
    std::array<SimplexMat<N,P>,N> simplexDiff()
    {
        SimplexMat<N,P> V = simplexVandermonde<N,P>();
        std::array<SimplexMat<N,P>,N> dV = simplexDVandermonde<N,P>();
        SimplexMat<N,P> Vinv = V.inverse();
        std::array<SimplexMat<N,P>,N> diff;
        for (int i=0; i<N; ++i) {
            diff[i] = dV[i] * Vinv;
        }
        return diff;
    }

    template<int N, int P>
    const SimplexArray<Tuple<double,N>,N,P> Master<N,P>::nodes = simplexNodes<N,P>();
    template<int N, int P>
    const SimplexMat<N,P> Master<N,P>::vandermonde = simplexVandermonde<N,P>();
    template<int N, int P>
    const std::array<SimplexMat<N,P>,N> Master<N,P>::dvandermonde = simplexDVandermonde<N,P>();
    template<int N, int P>
    const SimplexMat<N,P> Master<N,P>::mass = simplexMass<N,P>();
    template<int N, int P>
    const std::array<SimplexMat<N,P>,N> Master<N,P>::diff = simplexDiff<N,P>();

    /*** 2D ***/

    // Quadrature nodes
    template<> const std::vector<Tuple<double,2>> Quadrature<2,1>::nodes  = {{3.33333333333333333E-01, 3.33333333333333333E-01}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,2>::nodes  = {{3.33333333333333333E-01, 3.33333333333333333E-01}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,3>::nodes  = {{6.66666666666666667E-01, 1.66666666666666667E-01}, {1.66666666666666667E-01, 6.66666666666666667E-01}, {1.66666666666666667E-01, 1.66666666666666667E-01}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,4>::nodes  = {{3.33333333333333333E-01, 3.33333333333333333E-01}, {6.00000000000000000E-01, 2.00000000000000000E-01}, {2.00000000000000000E-01, 6.00000000000000000E-01}, {2.00000000000000000E-01, 2.00000000000000000E-01}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,5>::nodes  = {{1.081030181680700E-01, 4.459484909159650E-01}, {4.459484909159650E-01, 1.081030181680700E-01}, {4.459484909159650E-01, 4.459484909159650E-01}, {8.168475729804590E-01, 9.157621350977100E-02}, {9.157621350977100E-02, 8.168475729804590E-01}, {9.157621350977100E-02, 9.157621350977100E-02}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,6>::nodes  = {{3.33333333333333E-01, 3.33333333333333E-01}, {5.97158717897700E-02, 4.70142064105115E-01}, {4.70142064105115E-01, 5.97158717897700E-02}, {4.70142064105115E-01, 4.70142064105115E-01}, {7.97426985353087E-01, 1.01286507323456E-01}, {1.01286507323456E-01, 7.97426985353087E-01}, {1.01286507323456E-01, 1.01286507323456E-01}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,7>::nodes  = {{5.01426509658179E-01, 2.49286745170910E-01}, {2.49286745170910E-01, 5.01426509658179E-01}, {2.49286745170910E-01, 2.49286745170910E-01}, {8.73821971016996E-01, 6.30890144915020E-02}, {6.30890144915020E-02, 8.73821971016996E-01}, {6.30890144915020E-02, 6.30890144915020E-02}, {5.31450498448170E-02, 3.10352451033784E-01}, {6.36502499121399E-01, 5.31450498448170E-02}, {3.10352451033784E-01, 6.36502499121399E-01}, {5.31450498448170E-02, 6.36502499121399E-01}, {6.36502499121399E-01, 3.10352451033784E-01}, {3.10352451033784E-01, 5.31450498448170E-02}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,8>::nodes  = {{3.33333333333333E-01, 3.33333333333333E-01}, {4.79308067841920E-01, 2.60345966079040E-01}, {2.60345966079040E-01, 4.79308067841920E-01}, {2.60345966079040E-01, 2.60345966079040E-01}, {8.69739794195568E-01, 6.51301029022160E-02}, {6.51301029022160E-02, 8.69739794195568E-01}, {6.51301029022160E-02, 6.51301029022160E-02}, {4.86903154253160E-02, 3.12865496004874E-01}, {6.38444188569810E-01, 4.86903154253160E-02}, {3.12865496004874E-01, 6.38444188569810E-01}, {4.86903154253160E-02, 6.38444188569810E-01}, {6.38444188569810E-01, 3.12865496004874E-01}, {3.12865496004874E-01, 4.86903154253160E-02}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,9>::nodes  = {{3.33333333333333E-01, 3.33333333333333E-01}, {8.14148234145540E-02, 4.59292588292723E-01}, {4.59292588292723E-01, 8.14148234145540E-02}, {4.59292588292723E-01, 4.59292588292723E-01}, {6.58861384496480E-01, 1.70569307751760E-01}, {1.70569307751760E-01, 6.58861384496480E-01}, {1.70569307751760E-01, 1.70569307751760E-01}, {8.98905543365938E-01, 5.05472283170310E-02}, {5.05472283170310E-02, 8.98905543365938E-01}, {5.05472283170310E-02, 5.05472283170310E-02}, {8.39477740995800E-03, 2.63112829634638E-01}, {7.28492392955404E-01, 8.39477740995800E-03}, {2.63112829634638E-01, 7.28492392955404E-01}, {8.39477740995800E-03, 7.28492392955404E-01}, {7.28492392955404E-01, 2.63112829634638E-01}, {2.63112829634638E-01, 8.39477740995800E-03}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,10>::nodes = {{3.33333333333333E-01, 3.33333333333333E-01}, {2.06349616025250E-02, 4.89682519198738E-01}, {4.89682519198738E-01, 2.06349616025250E-02}, {4.89682519198738E-01, 4.89682519198738E-01}, {1.25820817014127E-01, 4.37089591492937E-01}, {4.37089591492937E-01, 1.25820817014127E-01}, {4.37089591492937E-01, 4.37089591492937E-01}, {6.23592928761935E-01, 1.88203535619033E-01}, {1.88203535619033E-01, 6.23592928761935E-01}, {1.88203535619033E-01, 1.88203535619033E-01}, {9.10540973211095E-01, 4.47295133944530E-02}, {4.47295133944530E-02, 9.10540973211095E-01}, {4.47295133944530E-02, 4.47295133944530E-02}, {3.68384120547360E-02, 2.21962989160766E-01}, {7.41198598784498E-01, 3.68384120547360E-02}, {2.21962989160766E-01, 7.41198598784498E-01}, {3.68384120547360E-02, 7.41198598784498E-01}, {7.41198598784498E-01, 2.21962989160766E-01}, {2.21962989160766E-01, 3.68384120547360E-02}};
    template<> const std::vector<Tuple<double,2>> Quadrature<2,11>::nodes = {{3.33333333333333E-01, 3.33333333333333E-01}, {2.88447332326850E-02, 4.85577633383657E-01}, {4.85577633383657E-01, 2.88447332326850E-02}, {4.85577633383657E-01, 4.85577633383657E-01}, {7.81036849029926E-01, 1.09481575485037E-01}, {1.09481575485037E-01, 7.81036849029926E-01}, {1.09481575485037E-01, 1.09481575485037E-01}, {1.41707219414880E-01, 3.07939838764121E-01}, {5.50352941820999E-01, 1.41707219414880E-01}, {3.07939838764121E-01, 5.50352941820999E-01}, {1.41707219414880E-01, 5.50352941820999E-01}, {5.50352941820999E-01, 3.07939838764121E-01}, {3.07939838764121E-01, 1.41707219414880E-01}, {2.50035347626860E-02, 2.46672560639903E-01}, {7.28323904597411E-01, 2.50035347626860E-02}, {2.46672560639903E-01, 7.28323904597411E-01}, {2.50035347626860E-02, 7.28323904597411E-01}, {7.28323904597411E-01, 2.46672560639903E-01}, {2.46672560639903E-01, 2.50035347626860E-02}, {9.54081540029900E-03, 6.68032510122000E-02}, {9.23655933587500E-01, 9.54081540029900E-03}, {6.68032510122000E-02, 9.23655933587500E-01}, {9.54081540029900E-03, 9.23655933587500E-01}, {9.23655933587500E-01, 6.68032510122000E-02}, {6.68032510122000E-02, 9.54081540029900E-03}};

    // Quadrature weights
    template<> const std::vector<double> Quadrature<2,1>::weights  = {5.00000000000000000E-01};
    template<> const std::vector<double> Quadrature<2,2>::weights  = {5.00000000000000000E-01};
    template<> const std::vector<double> Quadrature<2,3>::weights  = {1.66666666666666666E-01, 1.66666666666666667E-01, 1.66666666666666667E-01};
    template<> const std::vector<double> Quadrature<2,4>::weights  = {-2.81250000000000000E-01, 2.60416666666666667E-01, 2.60416666666666667E-01, 2.60416666666666666E-01};
    template<> const std::vector<double> Quadrature<2,5>::weights  = {1.116907948390055E-01, 1.116907948390055E-01, 1.116907948390055E-01, 5.497587182766100E-02, 5.497587182766100E-02, 5.497587182766100E-02};
    template<> const std::vector<double> Quadrature<2,6>::weights  = {1.12500000000000E-01, 6.61970763942530E-02, 6.61970763942530E-02, 6.61970763942530E-02, 6.29695902724135E-02, 6.29695902724135E-02, 6.29695902724135E-02};
    template<> const std::vector<double> Quadrature<2,7>::weights  = {5.83931378631895E-02, 5.83931378631895E-02, 5.83931378631895E-02, 2.54224531851035E-02, 2.54224531851035E-02, 2.54224531851035E-02, 4.14255378091870E-02, 4.14255378091870E-02, 4.14255378091870E-02, 4.14255378091870E-02, 4.14255378091870E-02, 4.14255378091870E-02};
    template<> const std::vector<double> Quadrature<2,8>::weights  = {-7.47850222338410E-02, 8.78076287166040E-02, 8.78076287166040E-02, 8.78076287166040E-02, 2.66736178044190E-02, 2.66736178044190E-02, 2.66736178044190E-02, 3.85568804451285E-02, 3.85568804451285E-02, 3.85568804451285E-02, 3.85568804451285E-02, 3.85568804451285E-02, 3.85568804451285E-02};
    template<> const std::vector<double> Quadrature<2,9>::weights  = {7.21578038388935E-02, 4.75458171336425E-02, 4.75458171336425E-02, 4.75458171336425E-02, 5.16086852673590E-02, 5.16086852673590E-02, 5.16086852673590E-02, 1.62292488115990E-02, 1.62292488115990E-02, 1.62292488115990E-02, 1.36151570872175E-02, 1.36151570872175E-02, 1.36151570872175E-02, 1.36151570872175E-02, 1.36151570872175E-02, 1.36151570872175E-02};
    template<> const std::vector<double> Quadrature<2,10>::weights = {4.85678981413995E-02, 1.56673501135695E-02, 1.56673501135695E-02, 1.56673501135695E-02, 3.89137705023870E-02, 3.89137705023870E-02, 3.89137705023870E-02, 3.98238694636050E-02, 3.98238694636050E-02, 3.98238694636050E-02, 1.27888378293490E-02, 1.27888378293490E-02, 1.27888378293490E-02, 2.16417696886445E-02, 2.16417696886445E-02, 2.16417696886445E-02, 2.16417696886445E-02, 2.16417696886445E-02, 2.16417696886445E-02};
    template<> const std::vector<double> Quadrature<2,11>::weights = {4.54089951913770E-02, 1.83629788782335E-02, 1.83629788782335E-02, 1.83629788782335E-02, 2.26605297177640E-02, 2.26605297177640E-02, 2.26605297177640E-02, 3.63789584227100E-02, 3.63789584227100E-02, 3.63789584227100E-02, 3.63789584227100E-02, 3.63789584227100E-02, 3.63789584227100E-02, 1.41636212655285E-02, 1.41636212655285E-02, 1.41636212655285E-02, 1.41636212655285E-02, 1.41636212655285E-02, 1.41636212655285E-02, 4.71083348186650E-03, 4.71083348186650E-03, 4.71083348186650E-03, 4.71083348186650E-03, 4.71083348186650E-03, 4.71083348186650E-03};

    /*** 3D ***/

    // Quadrature nodes
    template<> const std::vector<Tuple<double,3>> Quadrature<3,1>::nodes  = {{0.13819660112501, 0.13819660112501, 0.13819660112501}, {0.58541019662497, 0.13819660112501, 0.13819660112501}, {0.13819660112501, 0.58541019662497, 0.13819660112501}, {0.13819660112501, 0.13819660112501, 0.58541019662497}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,2>::nodes  = {{0.13819660112501, 0.13819660112501, 0.13819660112501}, {0.58541019662497, 0.13819660112501, 0.13819660112501}, {0.13819660112501, 0.58541019662497, 0.13819660112501}, {0.13819660112501, 0.13819660112501, 0.58541019662497}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,3>::nodes  = {{0.13819660112501, 0.13819660112501, 0.13819660112501}, {0.58541019662497, 0.13819660112501, 0.13819660112501}, {0.13819660112501, 0.58541019662497, 0.13819660112501}, {0.13819660112501, 0.13819660112501, 0.58541019662497}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,4>::nodes  = {{0.25000000000000, 0.25000000000000, 0.25000000000000}, {0.16666666666667, 0.16666666666667, 0.16666666666667}, {0.16666666666667, 0.16666666666667, 0.50000000000000}, {0.16666666666667, 0.50000000000000, 0.16666666666667}, {0.50000000000000, 0.16666666666667, 0.16666666666667}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,5>::nodes  = {{0.25000000000000, 0.25000000000000, 0.25000000000000}, {0.07142857142857, 0.07142857142857, 0.07142857142857}, {0.07142857142857, 0.07142857142857, 0.78571428571429}, {0.07142857142857, 0.78571428571429, 0.07142857142857}, {0.78571428571429, 0.07142857142857, 0.07142857142857}, {0.39940357616680, 0.39940357616680, 0.10059642383320}, {0.39940357616680, 0.10059642383320, 0.39940357616680}, {0.10059642383320, 0.39940357616680, 0.39940357616680}, {0.39940357616680, 0.10059642383320, 0.10059642383320}, {0.10059642383320, 0.39940357616680, 0.10059642383320}, {0.10059642383320, 0.10059642383320, 0.39940357616680}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,6>::nodes  = {{0.09273525031089, 0.09273525031089, 0.09273525031089}, {0.72179424906733, 0.09273525031089, 0.09273525031089}, {0.09273525031089, 0.72179424906733, 0.09273525031089}, {0.09273525031089, 0.09273525031089, 0.72179424906733}, {0.31088591926330, 0.31088591926330, 0.31088591926330}, {0.06734224221010, 0.31088591926330, 0.31088591926330}, {0.31088591926330, 0.06734224221010, 0.31088591926330}, {0.31088591926330, 0.31088591926330, 0.06734224221010}, {0.45449629587435, 0.45449629587435, 0.04550370412565}, {0.45449629587435, 0.04550370412565, 0.45449629587435}, {0.04550370412565, 0.45449629587435, 0.45449629587435}, {0.45449629587435, 0.04550370412565, 0.04550370412565}, {0.04550370412565, 0.45449629587435, 0.04550370412565}, {0.04550370412565, 0.04550370412565, 0.45449629587435}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,7>::nodes  = {{0.21460287125915, 0.21460287125915, 0.21460287125915}, {0.35619138622254, 0.21460287125915, 0.21460287125915}, {0.21460287125915, 0.35619138622254, 0.21460287125915}, {0.21460287125915, 0.21460287125915, 0.35619138622254}, {0.04067395853461, 0.04067395853461, 0.04067395853461}, {0.87797812439617, 0.04067395853461, 0.04067395853461}, {0.04067395853461, 0.87797812439617, 0.04067395853461}, {0.04067395853461, 0.04067395853461, 0.87797812439617}, {0.32233789014228, 0.32233789014228, 0.32233789014228}, {0.03298632957317, 0.32233789014228, 0.32233789014228}, {0.32233789014228, 0.03298632957317, 0.32233789014228}, {0.32233789014228, 0.32233789014228, 0.03298632957317}, {0.06366100187502, 0.06366100187502, 0.26967233145832}, {0.06366100187502, 0.26967233145832, 0.06366100187502}, {0.06366100187502, 0.06366100187502, 0.60300566479165}, {0.06366100187502, 0.60300566479165, 0.06366100187502}, {0.06366100187502, 0.26967233145832, 0.60300566479165}, {0.06366100187502, 0.60300566479165, 0.26967233145832}, {0.26967233145832, 0.06366100187502, 0.06366100187502}, {0.26967233145832, 0.06366100187502, 0.60300566479165}, {0.26967233145832, 0.60300566479165, 0.06366100187502}, {0.60300566479165, 0.06366100187502, 0.26967233145832}, {0.60300566479165, 0.06366100187502, 0.06366100187502}, {0.60300566479165, 0.26967233145832, 0.06366100187502}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,8>::nodes  = {{0.50000000000000, 0.50000000000000, 0}, {0.50000000000000, 0, 0.50000000000000}, {0, 0.50000000000000, 0.50000000000000}, {0, 0, 0.50000000000000}, {0, 0.50000000000000, 0}, {0.50000000000000, 0, 0}, {0.25000000000000, 0.25000000000000, 0.25000000000000}, {0.07821319233032, 0.07821319233032, 0.07821319233032}, {0.07821319233032, 0.07821319233032, 0.76536042300905}, {0.07821319233032, 0.76536042300905, 0.07821319233032}, {0.76536042300905, 0.07821319233032, 0.07821319233032}, {0.12184321666391, 0.12184321666391, 0.12184321666391}, {0.12184321666391, 0.12184321666391, 0.63447035000828}, {0.12184321666391, 0.63447035000828, 0.12184321666391}, {0.63447035000828, 0.12184321666391, 0.12184321666391}, {0.33253916444642, 0.33253916444642, 0.33253916444642}, {0.33253916444642, 0.33253916444642, 0.00238250666074}, {0.33253916444642, 0.00238250666074, 0.33253916444642}, {0.00238250666074, 0.33253916444642, 0.33253916444642}, {0.10000000000000, 0.10000000000000, 0.20000000000000}, {0.10000000000000, 0.20000000000000, 0.10000000000000}, {0.10000000000000, 0.10000000000000, 0.60000000000000}, {0.10000000000000, 0.60000000000000, 0.10000000000000}, {0.10000000000000, 0.20000000000000, 0.60000000000000}, {0.10000000000000, 0.60000000000000, 0.20000000000000}, {0.20000000000000, 0.10000000000000, 0.10000000000000}, {0.20000000000000, 0.10000000000000, 0.60000000000000}, {0.20000000000000, 0.60000000000000, 0.10000000000000}, {0.60000000000000, 0.10000000000000, 0.20000000000000}, {0.60000000000000, 0.10000000000000, 0.10000000000000}, {0.60000000000000, 0.20000000000000, 0.10000000000000}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,9>::nodes  = {{0.25000000000000, 0.25000000000000, 0.25000000000000}, {0.20682993161067, 0.20682993161067, 0.20682993161067}, {0.20682993161067, 0.20682993161067, 0.37951020516798}, {0.20682993161067, 0.37951020516798, 0.20682993161067}, {0.37951020516798, 0.20682993161067, 0.20682993161067}, {0.08210358831055, 0.08210358831055, 0.08210358831055}, {0.08210358831055, 0.08210358831055, 0.75368923506836}, {0.08210358831055, 0.75368923506836, 0.08210358831055}, {0.75368923506836, 0.08210358831055, 0.08210358831055}, {0.00578195050520, 0.00578195050520, 0.00578195050520}, {0.00578195050520, 0.00578195050520, 0.98265414848441}, {0.00578195050520, 0.98265414848441, 0.00578195050520}, {0.98265414848441, 0.00578195050520, 0.00578195050520}, {0.05053274001889, 0.05053274001889, 0.44946725998111}, {0.05053274001889, 0.44946725998111, 0.05053274001889}, {0.44946725998111, 0.05053274001889, 0.05053274001889}, {0.05053274001889, 0.44946725998111, 0.44946725998111}, {0.44946725998111, 0.05053274001889, 0.44946725998111}, {0.44946725998111, 0.44946725998111, 0.05053274001889}, {0.22906653611681, 0.22906653611681, 0.03563958278853}, {0.22906653611681, 0.03563958278853, 0.22906653611681}, {0.22906653611681, 0.22906653611681, 0.50622734497784}, {0.22906653611681, 0.50622734497784, 0.22906653611681}, {0.22906653611681, 0.03563958278853, 0.50622734497784}, {0.22906653611681, 0.50622734497784, 0.03563958278853}, {0.03563958278853, 0.22906653611681, 0.22906653611681}, {0.03563958278853, 0.22906653611681, 0.50622734497784}, {0.03563958278853, 0.50622734497784, 0.22906653611681}, {0.50622734497784, 0.22906653611681, 0.03563958278853}, {0.50622734497784, 0.22906653611681, 0.22906653611681}, {0.50622734497784, 0.03563958278853, 0.22906653611681}, {0.03660774955320, 0.03660774955320, 0.19048604193463}, {0.03660774955320, 0.19048604193463, 0.03660774955320}, {0.03660774955320, 0.03660774955320, 0.73629845895897}, {0.03660774955320, 0.73629845895897, 0.03660774955320}, {0.03660774955320, 0.19048604193463, 0.73629845895897}, {0.03660774955320, 0.73629845895897, 0.19048604193463}, {0.19048604193463, 0.03660774955320, 0.03660774955320}, {0.19048604193463, 0.03660774955320, 0.73629845895897}, {0.19048604193463, 0.73629845895897, 0.03660774955320}, {0.73629845895897, 0.03660774955320, 0.19048604193463}, {0.73629845895897, 0.03660774955320, 0.03660774955320}, {0.73629845895897, 0.19048604193463, 0.03660774955320}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,10>::nodes = {{0.25000000000000, 0.25000000000000, 0.25000000000000}, {0.04835103854974, 0.04835103854974, 0.04835103854974}, {0.04835103854974, 0.04835103854974, 0.85494688435079}, {0.04835103854974, 0.85494688435079, 0.04835103854974}, {0.85494688435079, 0.04835103854974, 0.04835103854974}, {0.32457928011788, 0.32457928011788, 0.32457928011788}, {0.32457928011788, 0.32457928011788, 0.02626215964635}, {0.32457928011788, 0.02626215964635, 0.32457928011788}, {0.02626215964635, 0.32457928011788, 0.32457928011788}, {0.11461654022399, 0.11461654022399, 0.11461654022399}, {0.11461654022399, 0.11461654022399, 0.65615037932801}, {0.11461654022399, 0.65615037932801, 0.11461654022399}, {0.65615037932801, 0.11461654022399, 0.11461654022399}, {0.22548995191151, 0.22548995191151, 0.22548995191151}, {0.22548995191151, 0.22548995191151, 0.32353014426546}, {0.22548995191151, 0.32353014426546, 0.22548995191151}, {0.32353014426546, 0.22548995191151, 0.22548995191151}, {0.13162780924687, 0.13162780924687, 0.08366470161718}, {0.13162780924687, 0.08366470161718, 0.13162780924687}, {0.13162780924687, 0.13162780924687, 0.65307967988908}, {0.13162780924687, 0.65307967988908, 0.13162780924687}, {0.13162780924687, 0.08366470161718, 0.65307967988908}, {0.13162780924687, 0.65307967988908, 0.08366470161718}, {0.08366470161718, 0.13162780924687, 0.13162780924687}, {0.08366470161718, 0.13162780924687, 0.65307967988908}, {0.08366470161718, 0.65307967988908, 0.13162780924687}, {0.65307967988908, 0.13162780924687, 0.08366470161718}, {0.65307967988908, 0.13162780924687, 0.13162780924687}, {0.65307967988908, 0.08366470161718, 0.13162780924687}, {0.43395146141141, 0.43395146141141, 0.10776985954943}, {0.43395146141141, 0.10776985954943, 0.43395146141141}, {0.43395146141141, 0.43395146141141, 0.02432721762776}, {0.43395146141141, 0.02432721762776, 0.43395146141141}, {0.43395146141141, 0.10776985954943, 0.02432721762776}, {0.43395146141141, 0.02432721762776, 0.10776985954943}, {0.10776985954943, 0.43395146141141, 0.43395146141141}, {0.10776985954943, 0.43395146141141, 0.02432721762776}, {0.10776985954943, 0.02432721762776, 0.43395146141141}, {0.02432721762776, 0.43395146141141, 0.10776985954943}, {0.02432721762776, 0.43395146141141, 0.43395146141141}, {0.02432721762776, 0.10776985954943, 0.43395146141141}, {-0.00137627731814, -0.00137627731814, 0.27655347263681}, {-0.00137627731814, 0.27655347263681, -0.00137627731814}, {-0.00137627731814, -0.00137627731814, 0.72619908199947}, {-0.00137627731814, 0.72619908199947, -0.00137627731814}, {-0.00137627731814, 0.27655347263681, 0.72619908199947}, {-0.00137627731814, 0.72619908199947, 0.27655347263681}, {0.27655347263681, -0.00137627731814, -0.00137627731814}, {0.27655347263681, -0.00137627731814, 0.72619908199947}, {0.27655347263681, 0.72619908199947, -0.00137627731814}, {0.72619908199947, -0.00137627731814, 0.27655347263681}, {0.72619908199947, -0.00137627731814, -0.00137627731814}, {0.72619908199947, 0.27655347263681, -0.00137627731814}};
    template<> const std::vector<Tuple<double,3>> Quadrature<3,11>::nodes = {{0.07142857142857, 0.07142857142857, 0.78571428571429}, {0.07142857142857, 0.21428571428571, 0.64285714285714}, {0.07142857142857, 0.35714285714286, 0.50000000000000}, {0.07142857142857, 0.50000000000000, 0.35714285714286}, {0.07142857142857, 0.64285714285714, 0.21428571428571}, {0.07142857142857, 0.78571428571429, 0.07142857142857}, {0.21428571428571, 0.07142857142857, 0.64285714285714}, {0.21428571428571, 0.21428571428571, 0.50000000000000}, {0.21428571428571, 0.35714285714286, 0.35714285714286}, {0.21428571428571, 0.50000000000000, 0.21428571428571}, {0.21428571428571, 0.64285714285714, 0.07142857142857}, {0.35714285714286, 0.07142857142857, 0.50000000000000}, {0.35714285714286, 0.21428571428571, 0.35714285714286}, {0.35714285714286, 0.35714285714286, 0.21428571428571}, {0.35714285714286, 0.50000000000000, 0.07142857142857}, {0.50000000000000, 0.07142857142857, 0.35714285714286}, {0.50000000000000, 0.21428571428571, 0.21428571428571}, {0.50000000000000, 0.35714285714286, 0.07142857142857}, {0.64285714285714, 0.07142857142857, 0.21428571428571}, {0.64285714285714, 0.21428571428571, 0.07142857142857}, {0.78571428571429, 0.07142857142857, 0.07142857142857}, {0.07142857142857, 0.07142857142857, 0.64285714285714}, {0.07142857142857, 0.21428571428571, 0.50000000000000}, {0.07142857142857, 0.35714285714286, 0.35714285714286}, {0.07142857142857, 0.50000000000000, 0.21428571428571}, {0.07142857142857, 0.64285714285714, 0.07142857142857}, {0.21428571428571, 0.07142857142857, 0.50000000000000}, {0.21428571428571, 0.21428571428571, 0.35714285714286}, {0.21428571428571, 0.35714285714286, 0.21428571428571}, {0.21428571428571, 0.50000000000000, 0.07142857142857}, {0.35714285714286, 0.07142857142857, 0.35714285714286}, {0.35714285714286, 0.21428571428571, 0.21428571428571}, {0.35714285714286, 0.35714285714286, 0.07142857142857}, {0.50000000000000, 0.07142857142857, 0.21428571428571}, {0.50000000000000, 0.21428571428571, 0.07142857142857}, {0.64285714285714, 0.07142857142857, 0.07142857142857}, {0.07142857142857, 0.07142857142857, 0.50000000000000}, {0.07142857142857, 0.21428571428571, 0.35714285714286}, {0.07142857142857, 0.35714285714286, 0.21428571428571}, {0.07142857142857, 0.50000000000000, 0.07142857142857}, {0.21428571428571, 0.07142857142857, 0.35714285714286}, {0.21428571428571, 0.21428571428571, 0.21428571428571}, {0.21428571428571, 0.35714285714286, 0.07142857142857}, {0.35714285714286, 0.07142857142857, 0.21428571428571}, {0.35714285714286, 0.21428571428571, 0.07142857142857}, {0.50000000000000, 0.07142857142857, 0.07142857142857}, {0.07142857142857, 0.07142857142857, 0.35714285714286}, {0.07142857142857, 0.21428571428571, 0.21428571428571}, {0.07142857142857, 0.35714285714286, 0.07142857142857}, {0.21428571428571, 0.07142857142857, 0.21428571428571}, {0.21428571428571, 0.21428571428571, 0.07142857142857}, {0.35714285714286, 0.07142857142857, 0.07142857142857}, {0.07142857142857, 0.07142857142857, 0.21428571428571}, {0.07142857142857, 0.21428571428571, 0.07142857142857}, {0.21428571428571, 0.07142857142857, 0.07142857142857}, {0.07142857142857, 0.07142857142857, 0.07142857142857}, {0.08333333333333, 0.08333333333333, 0.75000000000000}, {0.08333333333333, 0.25000000000000, 0.58333333333333}, {0.08333333333333, 0.41666666666667, 0.41666666666667}, {0.08333333333333, 0.58333333333333, 0.25000000000000}, {0.08333333333333, 0.75000000000000, 0.08333333333333}, {0.25000000000000, 0.08333333333333, 0.58333333333333}, {0.25000000000000, 0.25000000000000, 0.41666666666667}, {0.25000000000000, 0.41666666666667, 0.25000000000000}, {0.25000000000000, 0.58333333333333, 0.08333333333333}, {0.41666666666667, 0.08333333333333, 0.41666666666667}, {0.41666666666667, 0.25000000000000, 0.25000000000000}, {0.41666666666667, 0.41666666666667, 0.08333333333333}, {0.58333333333333, 0.08333333333333, 0.25000000000000}, {0.58333333333333, 0.25000000000000, 0.08333333333333}, {0.75000000000000, 0.08333333333333, 0.08333333333333}, {0.08333333333333, 0.08333333333333, 0.58333333333333}, {0.08333333333333, 0.25000000000000, 0.41666666666667}, {0.08333333333333, 0.41666666666667, 0.25000000000000}, {0.08333333333333, 0.58333333333333, 0.08333333333333}, {0.25000000000000, 0.08333333333333, 0.41666666666667}, {0.25000000000000, 0.25000000000000, 0.25000000000000}, {0.25000000000000, 0.41666666666667, 0.08333333333333}, {0.41666666666667, 0.08333333333333, 0.25000000000000}, {0.41666666666667, 0.25000000000000, 0.08333333333333}, {0.58333333333333, 0.08333333333333, 0.08333333333333}, {0.08333333333333, 0.08333333333333, 0.41666666666667}, {0.08333333333333, 0.25000000000000, 0.25000000000000}, {0.08333333333333, 0.41666666666667, 0.08333333333333}, {0.25000000000000, 0.08333333333333, 0.25000000000000}, {0.25000000000000, 0.25000000000000, 0.08333333333333}, {0.41666666666667, 0.08333333333333, 0.08333333333333}, {0.08333333333333, 0.08333333333333, 0.25000000000000}, {0.08333333333333, 0.25000000000000, 0.08333333333333}, {0.25000000000000, 0.08333333333333, 0.08333333333333}, {0.08333333333333, 0.08333333333333, 0.08333333333333}, {0.10000000000000, 0.10000000000000, 0.70000000000000}, {0.10000000000000, 0.30000000000000, 0.50000000000000}, {0.10000000000000, 0.50000000000000, 0.30000000000000}, {0.10000000000000, 0.70000000000000, 0.10000000000000}, {0.30000000000000, 0.10000000000000, 0.50000000000000}, {0.30000000000000, 0.30000000000000, 0.30000000000000}, {0.30000000000000, 0.50000000000000, 0.10000000000000}, {0.50000000000000, 0.10000000000000, 0.30000000000000}, {0.50000000000000, 0.30000000000000, 0.10000000000000}, {0.70000000000000, 0.10000000000000, 0.10000000000000}, {0.10000000000000, 0.10000000000000, 0.50000000000000}, {0.10000000000000, 0.30000000000000, 0.30000000000000}, {0.10000000000000, 0.50000000000000, 0.10000000000000}, {0.30000000000000, 0.10000000000000, 0.30000000000000}, {0.30000000000000, 0.30000000000000, 0.10000000000000}, {0.50000000000000, 0.10000000000000, 0.10000000000000}, {0.10000000000000, 0.10000000000000, 0.30000000000000}, {0.10000000000000, 0.30000000000000, 0.10000000000000}, {0.30000000000000, 0.10000000000000, 0.10000000000000}, {0.10000000000000, 0.10000000000000, 0.10000000000000}, {0.12500000000000, 0.12500000000000, 0.62500000000000}, {0.12500000000000, 0.37500000000000, 0.37500000000000}, {0.12500000000000, 0.62500000000000, 0.12500000000000}, {0.37500000000000, 0.12500000000000, 0.37500000000000}, {0.37500000000000, 0.37500000000000, 0.12500000000000}, {0.62500000000000, 0.12500000000000, 0.12500000000000}, {0.12500000000000, 0.12500000000000, 0.37500000000000}, {0.12500000000000, 0.37500000000000, 0.12500000000000}, {0.37500000000000, 0.12500000000000, 0.12500000000000}, {0.12500000000000, 0.12500000000000, 0.12500000000000}, {0.16666666666667, 0.16666666666667, 0.50000000000000}, {0.16666666666667, 0.50000000000000, 0.16666666666667}, {0.50000000000000, 0.16666666666667, 0.16666666666667}, {0.16666666666667, 0.16666666666667, 0.16666666666667}, {0.25000000000000, 0.25000000000000, 0.25000000000000}};

    // Quadrature weights
    template<> const std::vector<double> Quadrature<3,1>::weights  = {0.25000000000000, 0.25000000000000, 0.25000000000000, 0.25000000000000};
    template<> const std::vector<double> Quadrature<3,2>::weights  = {0.25000000000000, 0.25000000000000, 0.25000000000000, 0.25000000000000};
    template<> const std::vector<double> Quadrature<3,3>::weights  = {0.25000000000000, 0.25000000000000, 0.25000000000000, 0.25000000000000};
    template<> const std::vector<double> Quadrature<3,4>::weights  = {-0.80000000000000, 0.45000000000000, 0.45000000000000, 0.45000000000000, 0.45000000000000};
    template<> const std::vector<double> Quadrature<3,5>::weights  = {-0.07893333333333, 0.04573333333333, 0.04573333333333, 0.04573333333333, 0.04573333333333, 0.14933333333333, 0.14933333333333, 0.14933333333333, 0.14933333333333, 0.14933333333333, 0.14933333333333};
    template<> const std::vector<double> Quadrature<3,6>::weights  = {0.07349304311637, 0.07349304311637, 0.07349304311637, 0.07349304311637, 0.11268792571802, 0.11268792571802, 0.11268792571802, 0.11268792571802, 0.04254602077708, 0.04254602077708, 0.04254602077708, 0.04254602077708, 0.04254602077708, 0.04254602077703};
    template<> const std::vector<double> Quadrature<3,7>::weights  = {0.03992275025817, 0.03992275025817, 0.03992275025817, 0.03992275025817, 0.01007721105532, 0.01007721105532, 0.01007721105532, 0.01007721105532, 0.05535718154366, 0.05535718154366, 0.05535718154366, 0.05535718154366, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571429, 0.04821428571428};
    template<> const std::vector<double> Quadrature<3,8>::weights  = {0.00582010582011, 0.00582010582011, 0.00582010582011, 0.00582010582011, 0.00582010582011, 0.00582010582011, 0.10958534079666, 0.06359964914649, 0.06359964914649, 0.06359964914649, 0.06359964914649, -0.37510644068602, -0.37510644068602, -0.37510644068602, -0.37510644068602, 0.02934855157844, 0.02934855157844, 0.02934855157844, 0.02934855157844, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534393, 0.16534391534386};
    template<> const std::vector<double> Quadrature<3,9>::weights  = {-0.12300113195185, 0.08550183493721, 0.08550183493721, 0.08550183493721, 0.08550183493721, 0.01180219987880, 0.01180219987880, 0.01180219987880, 0.01180219987880, 0.00101900465456, 0.00101900465456, 0.00101900465456, 0.00101900465456, 0.02747810294681, 0.02747810294681, 0.02747810294681, 0.02747810294681, 0.02747810294681, 0.02747810294681, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.03422691485209, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484697, 0.01284311484690};
    template<> const std::vector<double> Quadrature<3,10>::weights = {-0.82679422995669, 0.01119201941451, 0.01119201941451, 0.01119201941451, 0.01119201941451, 0.02585654381696, 0.02585654381696, 0.02585654381696, 0.02585654381696, -0.54110859888723, -0.54110859888723, -0.54110859888723, -0.54110859888723, 0.26803545721508, 0.26803545721508, 0.26803545721508, 0.26803545721508, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.20820243530731, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.02011550341596, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325334, 0.00258977325330};
    template<> const std::vector<double> Quadrature<3,11>::weights = {0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, 0.27217694439047, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, -0.69914085914082, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, 0.61162373987892, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, -0.21015231681897, 0.02440848214286, 0.02440848214286, 0.02440848214286, 0.02440848214286, -0.00056437389765};
}

#endif
