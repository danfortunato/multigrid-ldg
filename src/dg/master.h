#ifndef MASTER_H
#define MASTER_H

#include <array>
#include <vector>
#include "common.h"
#include "range.h"

namespace DG
{
    /** @brief The master element: [0,1]^N */
    template<int P, int N>
    struct Master
    {
        /** Order of polynomial */
        static const int p = P-1;
        /** Number of nodes per element */
        static const int npl = ipow(P,N);
        /** Mass matrix */
        static const KronMat<P,N> mass;
        /** Inverse mass matrix */
        static const KronMat<P,N> invmass;
    };

    /** @brief Gauss-Lobatto nodes on [0,1] */
    template<int P>
    struct GaussLobatto
    {
        /** Nodal points */
        static const double nodes[P];
        /** Differentiation matrix */
        static const Mat<P,P> diff;
    };

    /** @brief Quadrature nodes and weights on [0,1] */
    template<int P>
    struct Quadrature
    {
        /** Number of quadrature points in each dimension */
        static const int Q = 2*P;
        /** Quadrature points */
        static const double nodes[Q];
        /** Quadrature weights */
        static const double weights[Q];
    };

    /** @brief Compute a tensor product of matrices */
    template<int P, int N>
    KronMat<P,N> tensorProduct(const KronMat<P,1>& A)
    {
        KronMat<P,N> M;
        for (RangeIterator<P,N> it; it != Range<P,N>::end(); ++it) {
            for (RangeIterator<P,N> jt; jt != Range<P,N>::end(); ++jt) {
                int i = it.linearIndex();
                int j = jt.linearIndex();
                M(i,j) = 1.0;
                for (int k=0; k<N; ++k) {
                    M(i,j) *= A(it(k),jt(k));
                }
            }
        }
        return M;
    }

    /*** 1D ***/

    // Mass matrix
    template<> const KronMat<1,1> Master<1,1>::mass = (KronMat<1,1>() << 1.0000000000000000000000000000000).finished();
    template<> const KronMat<2,1> Master<2,1>::mass = (KronMat<2,1>() << 0.33333333333333333333333333333333, 0.16666666666666666666666666666667, 0.16666666666666666666666666666667, 0.33333333333333333333333333333333).finished();
    template<> const KronMat<3,1> Master<3,1>::mass = (KronMat<3,1>() << 0.13333333333333333333333333333333, 0.066666666666666666666666666666667, -0.033333333333333333333333333333333, 0.066666666666666666666666666666667, 0.53333333333333333333333333333333, 0.066666666666666666666666666666667, -0.033333333333333333333333333333333, 0.066666666666666666666666666666667, 0.13333333333333333333333333333333).finished();
    template<> const KronMat<4,1> Master<4,1>::mass = (KronMat<4,1>() << 0.071428571428571428571428571428571, 0.026619856874997496385823496056325, -0.026619856874997496385823496056325, 0.011904761904761904761904761904762, 0.026619856874997496385823496056325, 0.35714285714285714285714285714286, 0.059523809523809523809523809523810, -0.026619856874997496385823496056325, -0.026619856874997496385823496056325, 0.059523809523809523809523809523810, 0.35714285714285714285714285714286, 0.026619856874997496385823496056325, 0.011904761904761904761904761904762, -0.026619856874997496385823496056325, 0.026619856874997496385823496056325, 0.071428571428571428571428571428571).finished();
    template<> const KronMat<5,1> Master<5,1>::mass = (KronMat<5,1>() << 0.044444444444444444444444444444444, 0.012962962962962962962962962962963, -0.014814814814814814814814814814815, 0.012962962962962962962962962962963, -0.0055555555555555555555555555555556, 0.012962962962962962962962962962963, 0.24197530864197530864197530864198, 0.034567901234567901234567901234568, -0.030246913580246913580246913580247, 0.012962962962962962962962962962963, -0.014814814814814814814814814814815, 0.034567901234567901234567901234568, 0.31604938271604938271604938271605, 0.034567901234567901234567901234568, -0.014814814814814814814814814814815, 0.012962962962962962962962962962963, -0.030246913580246913580246913580247, 0.034567901234567901234567901234568, 0.24197530864197530864197530864198, 0.012962962962962962962962962962963, -0.0055555555555555555555555555555556, 0.012962962962962962962962962962963, -0.014814814814814814814814814814815, 0.012962962962962962962962962962963, 0.044444444444444444444444444444444).finished();
    template<> const KronMat<6,1> Master<6,1>::mass = (KronMat<6,1>() << 0.030303030303030303030303030303030, 0.0072202172183490582408057449110513, -0.0087422407708978127016504080639810, 0.0087422407708978127016504080639810, -0.0072202172183490582408057449110513, 0.0030303030303030303030303030303030, 0.0072202172183490582408057449110513, 0.17203407104447590014391491282365, 0.020829889522526545484491123607855, -0.020829889522526545484491123607855, 0.017203407104447590014391491282365, -0.0072202172183490582408057449110513, -0.0087422407708978127016504080639810, 0.020829889522526545484491123607855, 0.25220835319794834228032751141878, 0.025220835319794834228032751141878, -0.020829889522526545484491123607855, 0.0087422407708978127016504080639810, 0.0087422407708978127016504080639810, -0.020829889522526545484491123607855, 0.025220835319794834228032751141878, 0.25220835319794834228032751141878, 0.020829889522526545484491123607855, -0.0087422407708978127016504080639810, -0.0072202172183490582408057449110513, 0.017203407104447590014391491282365, -0.020829889522526545484491123607855, 0.020829889522526545484491123607855, 0.17203407104447590014391491282365, 0.0072202172183490582408057449110513, 0.0030303030303030303030303030303030, -0.0072202172183490582408057449110513, 0.0087422407708978127016504080639810, -0.0087422407708978127016504080639810, 0.0072202172183490582408057449110513, 0.030303030303030303030303030303030).finished();

    // Inverse mass matrix
    template<> const KronMat<1,1> Master<1,1>::invmass = (KronMat<1,1>() << 1.0000000000000000000000000000000).finished();
    template<> const KronMat<2,1> Master<2,1>::invmass = (KronMat<2,1>() << 4.0000000000000000000000000000000, -2.0000000000000000000000000000000, -2.0000000000000000000000000000000, 4.0000000000000000000000000000000).finished();
    template<> const KronMat<3,1> Master<3,1>::invmass = (KronMat<3,1>() << 9.0000000000000000000000000000000, -1.5000000000000000000000000000000, 3.0000000000000000000000000000000, -1.5000000000000000000000000000000, 2.2500000000000000000000000000000, -1.5000000000000000000000000000000, 3.0000000000000000000000000000000, -1.5000000000000000000000000000000, 9.0000000000000000000000000000000).finished();
    template<> const KronMat<4,1> Master<4,1>::invmass = (KronMat<4,1>() << 16.000000000000000000000000000000, -1.7888543819998317571273389349850, 1.7888543819998317571273389349850, -4.0000000000000000000000000000000, -1.7888543819998317571273389349850, 3.2000000000000000000000000000000, -0.80000000000000000000000000000000, 1.7888543819998317571273389349850, 1.7888543819998317571273389349850, -0.80000000000000000000000000000000, 3.2000000000000000000000000000000, -1.7888543819998317571273389349850, -4.0000000000000000000000000000000, 1.7888543819998317571273389349850, -1.7888543819998317571273389349850, 16.000000000000000000000000000000).finished();
    template<> const KronMat<5,1> Master<5,1>::invmass = (KronMat<5,1>() << 25.000000000000000000000000000000, -2.1428571428571428571428571428571, 1.8750000000000000000000000000000, -2.1428571428571428571428571428571, 5.0000000000000000000000000000000, -2.1428571428571428571428571428571, 4.5918367346938775510204081632653, -0.80357142857142857142857142857143, 0.91836734693877551020408163265306, -2.1428571428571428571428571428571, 1.8750000000000000000000000000000, -0.80357142857142857142857142857143, 3.5156250000000000000000000000000, -0.80357142857142857142857142857143, 1.8750000000000000000000000000000, -2.1428571428571428571428571428571, 0.91836734693877551020408163265306, -0.80357142857142857142857142857143, 4.5918367346938775510204081632653, -2.1428571428571428571428571428571, 5.0000000000000000000000000000000, -2.1428571428571428571428571428571, 1.8750000000000000000000000000000, -2.1428571428571428571428571428571, 25.000000000000000000000000000000).finished();
    template<> const KronMat<6,1> Master<6,1>::invmass = (KronMat<6,1>() << 36.000000000000000000000000000000, -2.5181816047877231298535190356850, 2.0797663503325064761843869336583, -2.0797663503325064761843869336583, 2.5181816047877231298535190356850, -6.0000000000000000000000000000000, -2.5181816047877231298535190356850, 6.3412385946912726059053774299578, -0.87287156094396952506438994166248, 0.87287156094396952506438994166248, -1.0568730991152121009842295716596, 2.5181816047877231298535190356850, 2.0797663503325064761843869336583, -0.87287156094396952506438994166248, 4.3254280719753940607612892367089, -0.72090467866256567679354820611814, 0.87287156094396952506438994166248, -2.0797663503325064761843869336583, -2.0797663503325064761843869336583, 0.87287156094396952506438994166248, -0.72090467866256567679354820611814, 4.3254280719753940607612892367089, -0.87287156094396952506438994166248, 2.0797663503325064761843869336583, 2.5181816047877231298535190356850, -1.0568730991152121009842295716596, 0.87287156094396952506438994166248, -0.87287156094396952506438994166248, 6.3412385946912726059053774299578, -2.5181816047877231298535190356850, -6.0000000000000000000000000000000, 2.5181816047877231298535190356850, -2.0797663503325064761843869336583, 2.0797663503325064761843869336583, -2.5181816047877231298535190356850, 36.000000000000000000000000000000).finished();

    // Differentiation matrix
    template<> const Mat<1,1> GaussLobatto<1>::diff = (KronMat<1,1>() << 0).finished();
    template<> const Mat<2,2> GaussLobatto<2>::diff = (KronMat<2,1>() << -1.0000000000000000000000000000000, 1.0000000000000000000000000000000, -1.0000000000000000000000000000000, 1.0000000000000000000000000000000).finished();
    template<> const Mat<3,3> GaussLobatto<3>::diff = (KronMat<3,1>() << -3.0000000000000000000000000000000, 4.0000000000000000000000000000000, -1.0000000000000000000000000000000, -1.0000000000000000000000000000000, 0, 1.0000000000000000000000000000000, 1.0000000000000000000000000000000, -4.0000000000000000000000000000000, 3.0000000000000000000000000000000).finished();
    template<> const Mat<4,4> GaussLobatto<4>::diff = (KronMat<4,1>() << -6.0000000000000000000000000000000, 8.0901699437494742410229341718282, -3.0901699437494742410229341718282, 1.0000000000000000000000000000000, -1.6180339887498948482045868343656, 0, 2.2360679774997896964091736687313, -0.61803398874989484820458683436564, 0.61803398874989484820458683436564, -2.2360679774997896964091736687313, 0, 1.6180339887498948482045868343656, -1.0000000000000000000000000000000, 3.0901699437494742410229341718282, -8.0901699437494742410229341718282, 6.0000000000000000000000000000000).finished();
    template<> const Mat<5,5> GaussLobatto<5>::diff = (KronMat<5,1>() << -10.000000000000000000000000000000, 13.513004977448480007686055059349, -5.3333333333333333333333333333333, 2.8203283558848533256472782739840, -1.0000000000000000000000000000000, -2.4819805060619657156974386843703, 0, 3.4914862437758781002575597666499, -1.5275252316519466688626823979093, 0.51801949393803428430256131562971, 0.75000000000000000000000000000000, -2.6731691553909066705096941963413, 0, 2.6731691553909066705096941963413, -0.75000000000000000000000000000000, -0.51801949393803428430256131562971, 1.5275252316519466688626823979093, -3.4914862437758781002575597666499, 0, 2.4819805060619657156974386843703, 1.0000000000000000000000000000000, -2.8203283558848533256472782739840, 5.3333333333333333333333333333333, -13.513004977448480007686055059349, 10.000000000000000000000000000000).finished();
    template<> const Mat<6,6> GaussLobatto<6>::diff = (KronMat<6,1>() << -15.000000000000000000000000000000, 20.282831872639338560469058541034, -8.0723745406106960105490572959394, 4.4893692963523336485425942813823, -2.6998266283809761984625955264767, 1.0000000000000000000000000000000, -3.5727298966781897879449677430149, 0, 5.0468535548589108638176753007531, -2.3056563170718586826636461512611, 1.3070950148596003344014958341117, -0.47556235596846272761055724058875, 0.96990209570713833861191439066801, -3.4425139056604667664321293880950, 0, 3.5059239327357319577551419038627, -1.5727133444464814748790974613442, 0.53940122166407794494417055490850, -0.53940122166407794494417055490850, 1.5727133444464814748790974613442, -3.5059239327357319577551419038627, 0, 3.4425139056604667664321293880950, -0.96990209570713833861191439066801, 0.47556235596846272761055724058875, -1.3070950148596003344014958341117, 2.3056563170718586826636461512611, -5.0468535548589108638176753007531, 0, 3.5727298966781897879449677430149, -1.0000000000000000000000000000000, 2.6998266283809761984625955264767, -4.4893692963523336485425942813823, 8.0723745406106960105490572959394, -20.282831872639338560469058541034, 15.000000000000000000000000000000).finished();

    // Gauss-Lobatto nodes
    template<> const double GaussLobatto<1>::nodes[] = {0.50000000000000000000000000000000};
    template<> const double GaussLobatto<2>::nodes[] = {0, 1.0000000000000000000000000000000};
    template<> const double GaussLobatto<3>::nodes[] = {0, 0.50000000000000000000000000000000, 1.0000000000000000000000000000000};
    template<> const double GaussLobatto<4>::nodes[] = {0, 0.27639320225002103035908263312687, 0.72360679774997896964091736687313, 1.0000000000000000000000000000000};
    template<> const double GaussLobatto<5>::nodes[] = {0, 0.17267316464601142810085377187657, 0.50000000000000000000000000000000, 0.82732683535398857189914622812343, 1.0000000000000000000000000000000};
    template<> const double GaussLobatto<6>::nodes[] = {0, 0.11747233803526765357449851302033, 0.35738424175967745184292450297956, 0.64261575824032254815707549702044, 0.88252766196473234642550148697967, 1.0000000000000000000000000000000};

    // Quadrature nodes
    template<> const double Quadrature<1>::nodes[] = {0.21132486540518711774542560974902, 0.78867513459481288225457439025098};
    template<> const double Quadrature<2>::nodes[] = {0.069431844202973712388026755553595, 0.33000947820757186759866712044838, 0.66999052179242813240133287955162, 0.93056815579702628761197324444640};
    template<> const double Quadrature<3>::nodes[] = {0.033765242898423986093849222753003, 0.16939530676686774316930020249005, 0.38069040695840154568474913915964, 0.61930959304159845431525086084036, 0.83060469323313225683069979750995, 0.96623475710157601390615077724700};
    template<> const double Quadrature<4>::nodes[] = {0.019855071751231884158219565715264, 0.10166676129318663020422303176208, 0.23723379504183550709113047540538, 0.40828267875217509753026192881991, 0.59171732124782490246973807118009, 0.76276620495816449290886952459462, 0.89833323870681336979577696823792, 0.98014492824876811584178043428474};
    template<> const double Quadrature<5>::nodes[] = {0.013046735741414139961017993957774, 0.067468316655507744633951655788253, 0.16029521585048779688283631744256, 0.28330230293537640460036702841711, 0.42556283050918439455758699943514, 0.57443716949081560544241300056486, 0.71669769706462359539963297158289, 0.83970478414951220311716368255744, 0.93253168334449225536604834421175, 0.98695326425858586003898200604223};
    template<> const double Quadrature<6>::nodes[] = {0.0092196828766403746547254549253596, 0.047941371814762571660767066940452, 0.11504866290284765648155308339359, 0.20634102285669127635164879052973, 0.31608425050090990312365423167814, 0.43738329574426554226377931526807, 0.56261670425573445773622068473193, 0.68391574949909009687634576832186, 0.79365897714330872364835120947027, 0.88495133709715234351844691660641, 0.95205862818523742833923293305955, 0.99078031712335962534527454507464};
    
    // Quadrature weights
    template<> const double Quadrature<1>::weights[] = {0.50000000000000000000000000000000, 0.50000000000000000000000000000000};
    template<> const double Quadrature<2>::weights[] = {0.17392742256872692868653197461100, 0.32607257743127307131346802538900, 0.32607257743127307131346802538900, 0.17392742256872692868653197461100};
    template<> const double Quadrature<3>::weights[] = {0.085662246189585172520148071086366, 0.18038078652406930378491675691886, 0.23395696728634552369493517199478, 0.23395696728634552369493517199478, 0.18038078652406930378491675691886, 0.085662246189585172520148071086366};
    template<> const double Quadrature<4>::weights[] = {0.050614268145188129576265677154981, 0.11119051722668723527217799721312, 0.15685332293894364366898110099330, 0.18134189168918099148257522463860, 0.18134189168918099148257522463860, 0.15685332293894364366898110099330, 0.11119051722668723527217799721312, 0.050614268145188129576265677154981};
    template<> const double Quadrature<5>::weights[] = {0.033335672154344068796784404946666, 0.074725674575290296572888169828849, 0.10954318125799102199776746711408, 0.13463335965499817754561346078473, 0.14776211235737643508694649732567, 0.14776211235737643508694649732567, 0.13463335965499817754561346078473, 0.10954318125799102199776746711408, 0.074725674575290296572888169828849, 0.033335672154344068796784404946666};
    template<> const double Quadrature<6>::weights[] = {0.023587668193255913597307980742509, 0.053469662997659215480127359096998, 0.080039164271673113167326264771680, 0.10158371336153296087453222790490, 0.11674626826917740438042494946244, 0.12457352290670139250028121802148, 0.12457352290670139250028121802148, 0.11674626826917740438042494946244, 0.10158371336153296087453222790490, 0.080039164271673113167326264771680, 0.053469662997659215480127359096998, 0.023587668193255913597307980742509};

    /*** 2D ***/

    // Mass matrix
    template<> const KronMat<1,2> Master<1,2>::mass = tensorProduct<1,2>(Master<1,1>::mass);
    template<> const KronMat<2,2> Master<2,2>::mass = tensorProduct<2,2>(Master<2,1>::mass);
    template<> const KronMat<3,2> Master<3,2>::mass = tensorProduct<3,2>(Master<3,1>::mass);
    template<> const KronMat<4,2> Master<4,2>::mass = tensorProduct<4,2>(Master<4,1>::mass);
    template<> const KronMat<5,2> Master<5,2>::mass = tensorProduct<5,2>(Master<5,1>::mass);
    template<> const KronMat<6,2> Master<6,2>::mass = tensorProduct<6,2>(Master<6,1>::mass);

    // Inverse mass matrix
    template<> const KronMat<1,2> Master<1,2>::invmass = tensorProduct<1,2>(Master<1,1>::invmass);
    template<> const KronMat<2,2> Master<2,2>::invmass = tensorProduct<2,2>(Master<2,1>::invmass);
    template<> const KronMat<3,2> Master<3,2>::invmass = tensorProduct<3,2>(Master<3,1>::invmass);
    template<> const KronMat<4,2> Master<4,2>::invmass = tensorProduct<4,2>(Master<4,1>::invmass);
    template<> const KronMat<5,2> Master<5,2>::invmass = tensorProduct<5,2>(Master<5,1>::invmass);
    template<> const KronMat<6,2> Master<6,2>::invmass = tensorProduct<6,2>(Master<6,1>::invmass);

    /*** 3D ***/

    // Mass matrix
    template<> const KronMat<1,3> Master<1,3>::mass = tensorProduct<1,3>(Master<1,1>::mass);
    template<> const KronMat<2,3> Master<2,3>::mass = tensorProduct<2,3>(Master<2,1>::mass);
    template<> const KronMat<3,3> Master<3,3>::mass = tensorProduct<3,3>(Master<3,1>::mass);
    template<> const KronMat<4,3> Master<4,3>::mass = tensorProduct<4,3>(Master<4,1>::mass);
    template<> const KronMat<5,3> Master<5,3>::mass = tensorProduct<5,3>(Master<5,1>::mass);
    template<> const KronMat<6,3> Master<6,3>::mass = tensorProduct<6,3>(Master<6,1>::mass);

    // Inverse mass matrix
    template<> const KronMat<1,3> Master<1,3>::invmass = tensorProduct<1,3>(Master<1,1>::invmass);
    template<> const KronMat<2,3> Master<2,3>::invmass = tensorProduct<2,3>(Master<2,1>::invmass);
    template<> const KronMat<3,3> Master<3,3>::invmass = tensorProduct<3,3>(Master<3,1>::invmass);
    template<> const KronMat<4,3> Master<4,3>::invmass = tensorProduct<4,3>(Master<4,1>::invmass);
    template<> const KronMat<5,3> Master<5,3>::invmass = tensorProduct<5,3>(Master<5,1>::invmass);
    template<> const KronMat<6,3> Master<6,3>::invmass = tensorProduct<6,3>(Master<6,1>::invmass);
}

#endif
